/* Copyright 2012 SRI International
 * See LICENSE for other credits and copying information
 */

#include "util.h"
#include "unittest.h"

#include "zlib.h"
#include "zpack.h"

/* Smoke tests for zlib. */

static void
test_zlib_crc32(void *)
{
  // Test vectors generated using a standalone crc32 implementation
  // of unknown provenance, and then validated with the implementation
  // built into zlib.  If anyone knows a reliable source for "official"
  // test vectors for the 0x04C11DB7 polynomial, please let us know.

  struct hash_testvec
  {
    const uint8_t *text;
    size_t tlen;
    uint32_t digest;
  };
  static const struct hash_testvec tests[] = {
#define T(s, d) { (const uint8_t *)s, sizeof s - 1, 0x##d }

    // the empty string
    T("", 00000000),

    // 4-byte messages
    T("\x00\x00\x00\x00", 2144df1c),
    T("\x11\x11\x11\x11", ed6c2543),
    T("\x22\x22\x22\x22", 62642de3),
    T("\x33\x33\x33\x33", ae4cd7bc),
    T("\x44\x44\x44\x44", a7053ae2),
    T("\x55\x55\x55\x55", 6b2dc0bd),
    T("\x66\x66\x66\x66", e425c81d),
    T("\x77\x77\x77\x77", 280d3242),
    T("\x88\x88\x88\x88", f6b612a1),
    T("\x99\x99\x99\x99", 3a9ee8fe),
    T("\xaa\xaa\xaa\xaa", b596e05e),
    T("\xbb\xbb\xbb\xbb", 79be1a01),
    T("\xcc\xcc\xcc\xcc", 70f7f75f),
    T("\xdd\xdd\xdd\xdd", bcdf0d00),
    T("\xee\xee\xee\xee", 33d705a0),
    T("\xff\xff\xff\xff", ffffffff),
    T("\x40\x49\x0f\xdb", 538226fd), // pi (IEEE single)

    // 8-byte messages
    T("\x00\x00\x00\x00\x00\x00\x00\x00", 6522df69),
    T("\x00\x00\x00\x00\xff\xff\xff\xff", bb99ff8a),
    T("\xff\xff\xff\xff\x00\x00\x00\x00", ffffffff),
    T("\xff\xff\xff\xff\xff\xff\xff\xff", 2144df1c),
    T("\x55\x55\x55\x55\x55\x55\x55\x55", efd02285),
    T("\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa", abb622f0),
    T("\x40\x09\x21\xfb\x54\x44\x2d\x18", 2a8990d8), // pi (IEEE double)

    // 32-byte messages: all possible bytes occur once
    T("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
      "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
      91267e8a),
    T("\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f"
      "\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f",
      f6a606e3),
    T("\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f"
      "\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f",
      5e268e58),
    T("\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f"
      "\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f",
      39a6f631),
    T("\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f"
      "\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f",
      d456996f),
    T("\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf"
      "\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf",
      b3d6e106),
    T("\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf"
      "\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf",
      1b5669bd),
    T("\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef"
      "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff",
      7cd611d4),

    // 26- to 40-letter pangrams from Wikipedia, all nonletters removed,
    // all lowercase
    T("cwmfjordbankglyphsvextquiz", 81308910),
    T("nymphsblitzquickvexdwarfjog", c9b201ae),
    T("brickquizwhangsjumpyveldtfox", c17836eb),
    T("vexednymphsgoforquickwaltzjob", ea8c2360),
    T("bothfickledwarvesjinxmypigquiz", 3c7c5f5f),
    T("ficklejinxbogdwarvesspymathquiz", 75862807),
    T("averybadquackmightjinxzippyfowls", 563373aa),
    T("aquickbrownfoxjumpsoverthelazydog", 56df6600),
    T("quizzicaltwinsprovedmyhijackbugfix", b7140701),
    T("whenzombiesarrivequicklyfaxjudgepat", c398efae),
    T("heavyboxesperformquickwaltzesandjigs", bb60c571),
    T("fakebugsputinwaxjonquilsdrivehimcrazy", a1c524f0),
    T("wovensilkpyjamasexchangedforbluequartz", 9a7f064e),
    T("thequickonyxgoblinjumpsoverthelazydwarf", 3b478712),
    T("amazinglyfewdiscothequesprovidejukeboxes", 7ddde4a3),

    // self-describing pangram by Lee Sallows (SciAm, 1984)
    T("This Pangram contains four as, one b, two cs, one d, thirty es, "
      "six fs, five gs, seven hs, eleven is, one j, one k, two ls, two ms, "
      "eighteen ns, fifteen os, two ps, one q, five rs, twenty-seven ss, "
      "eighteen ts, two us, seven vs, eight ws, two xs, three ys, & one z.",
      3ab5b411),

    // "Lion-Eating Poet in the Stone Den" by Chao Yuen Ren,
    // Simplified Chinese text in UTF-8
    T("\xe3\x80\x8a\xe6\x96\xbd\xe6\xb0\x8f\xe9\xa3\x9f\xe7\x8b\xae\xe5\x8f"
      "\xb2\xe3\x80\x8b \xe7\x9f\xb3\xe5\xae\xa4\xe8\xaf\x97\xe5\xa3\xab\xe6"
      "\x96\xbd\xe6\xb0\x8f\xef\xbc\x8c\xe5\x97\x9c\xe7\x8b\xae\xef\xbc\x8c"
      "\xe8\xaa\x93\xe9\xa3\x9f\xe5\x8d\x81\xe7\x8b\xae\xe3\x80\x82 \xe6\xb0"
      "\x8f\xe6\x97\xb6\xe6\x97\xb6\xe9\x80\x82\xe5\xb8\x82\xe8\xa7\x86\xe7"
      "\x8b\xae\xe3\x80\x82 \xe5\x8d\x81\xe6\x97\xb6\xef\xbc\x8c\xe9\x80\x82"
      "\xe5\x8d\x81\xe7\x8b\xae\xe9\x80\x82\xe5\xb8\x82\xe3\x80\x82 \xe6\x98"
      "\xaf\xe6\x97\xb6\xef\xbc\x8c\xe9\x80\x82\xe6\x96\xbd\xe6\xb0\x8f\xe9"
      "\x80\x82\xe5\xb8\x82\xe3\x80\x82 \xe6\xb0\x8f\xe8\xa7\x86\xe6\x98\xaf"
      "\xe5\x8d\x81\xe7\x8b\xae\xef\xbc\x8c\xe6\x81\x83\xe7\x9f\xa2\xe5\x8a"
      "\xbf\xef\xbc\x8c\xe4\xbd\xbf\xe6\x98\xaf\xe5\x8d\x81\xe7\x8b\xae\xe9"
      "\x80\x9d\xe4\xb8\x96\xe3\x80\x82 \xe6\xb0\x8f\xe6\x8b\xbe\xe6\x98\xaf"
      "\xe5\x8d\x81\xe7\x8b\xae\xe5\xb0\xb8\xef\xbc\x8c\xe9\x80\x82\xe7\x9f"
      "\xb3\xe5\xae\xa4\xe3\x80\x82 \xe7\x9f\xb3\xe5\xae\xa4\xe6\xb9\xbf\xef"
      "\xbc\x8c\xe6\xb0\x8f\xe4\xbd\xbf\xe4\xbe\x8d\xe6\x8b\xad\xe7\x9f\xb3"
      "\xe5\xae\xa4\xe3\x80\x82 \xe7\x9f\xb3\xe5\xae\xa4\xe6\x8b\xad\xef\xbc"
      "\x8c\xe6\xb0\x8f\xe5\xa7\x8b\xe8\xaf\x95\xe9\xa3\x9f\xe6\x98\xaf\xe5"
      "\x8d\x81\xe7\x8b\xae\xe3\x80\x82 \xe9\xa3\x9f\xe6\x97\xb6\xef\xbc\x8c"
      "\xe5\xa7\x8b\xe8\xaf\x86\xe6\x98\xaf\xe5\x8d\x81\xe7\x8b\xae\xe5\xb0"
      "\xb8\xef\xbc\x8c\xe5\xae\x9e\xe5\x8d\x81\xe7\x9f\xb3\xe7\x8b\xae\xe5"
      "\xb0\xb8\xe3\x80\x82 \xe8\xaf\x95\xe9\x87\x8a\xe6\x98\xaf\xe4\xba\x8b"
      "\xe3\x80\x82",
      1fa606e5),

    { 0, 0, 0 }
#undef T
  };

  int i;
  uint32_t h;
  for (i = 0; tests[i].text; i++) {
    h = generate_crc32c(tests[i].text, tests[i].tlen);
    tt_assert_op_type(h,==,tests[i].digest, unsigned int, "%08x");
  }

 end:;
}

#define T(name) \
  { #name, test_zlib_##name, 0, 0, 0 }

struct testcase_t zlib_tests[] = {
  T(crc32),
  END_OF_TESTCASES
};
