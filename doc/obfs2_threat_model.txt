              Threat model for the obfs2 obfuscation protocol

                              George Kadianakis
                               Nick Mathewson

0. Abstract

   We discuss the intended threat model for the 'obfs2' protocol
   obfuscator, its limitations, and its implications for the protocol
   design.

   The 'obfs2' protocol is based on Bruce Leidl's obfuscated SSH layer,
   and is documented in the 'doc/protocol-spec.txt' file in the obfsproxy
   distribution.

1. Adversary capabilities and goals

   The adversary controls the infrastructure of the network within and
   at the edges of her jurisdiction, and she can potentially monitor,
   block, alter, and inject trafÔ¨Åc anywhere within this region.

   The censor also holds a blacklist of network protocols, which she is
   interested in blocking.

2. Adversary attacks:

   The censor passively monitors traffic and looks for content
   signatures, in an attempt to distinguish network protocols. Upon
   detecting a blacklisted protocol, the censor blocks the connection.

3. Goals of obfs2

   obfs2 attempts to counter the above attack by removing content
   signatures from network traffic. obfs2 encrypts the traffic stream
   with a stream cipher, which results in the traffic looking uniformly
   random.

4. Discussion

4.1. obfs2 shortcomings

   obfs2 was designed as a pluggable transports proof-of-concept: it is
   simple, useable and easily implementable. It does _not_ try to protect
   against sophisticated adversaries:

   obfs2 does not try to protect against Tor protocol fingerprints, like
   the packet size or packet timing.

   obfs2 does not try to protect against attackers capable of measuring
   traffic entropy.

   obfs2 does not try to protect against Deep Packet Inspection machines
   that expect the obfs2 protocol. Such machines can trivially retrieve
   the decryption key off the traffic stream and use it to decrypt obfs2
   and detect the Tor protocol.

   In other words, obfs2 does not try to protect against anything other
   than fingerprintable TLS content patterns.

   That said, obfs2 is not useless. It protects against many real-life
   Tor traffic detection methods currentl deployed, since most of them
   use static SSL handshake strings as signatures.

